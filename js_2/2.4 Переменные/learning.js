//Переменные используются для хранения информации.

//Переменная – это «именованное хранилище» для данных. 
//Мы можем использовать переменные для хранения товаров, 
//посетителей и других данных.

let message;

message = 'Hello'; // сохранить строку 'Hello' в переменной с именем message

//Строка сохраняется в области памяти, связанной с переменной. 
//Мы можем получить к ней доступ, используя имя переменной:

alert(message); // показывает содержимое переменной

// Мы также можем объявить несколько переменных в одной строке:

let user = 'John', age = 25, message2 = 'Hello';

// Многострочный вариант немного длиннее, но легче для чтения:

let user2 = 'John';
let age2 = 25;
let message3 = 'Hello';

// Некоторые люди также определяют несколько переменных в таком вот многострочном стиле:

let user3 = 'John',
  age3 = 25,
  message4 = 'Hello';

  let user4 = 'John'
  , age4 = 25
  , message5 = 'Hello';

  // В старых скриптах вы также можете найти другое ключевое слово: var вместо let:

var message6 = 'Hello';
var message6 = 'Hello 111';

// Ключевое слово var – почти то же самое, что и let. 
// Оно объявляет переменную, но немного по-другому, «устаревшим» способом.

message = 'Hello!';

message = 'World!'; // значение изменено

alert(message);

// Мы также можем объявить две переменные и скопировать данные из одной в другую.

let hello = 'Hello world!';

// копируем значение 'Hello world' из переменной hello в переменную message
message = hello;

// теперь две переменные содержат одинаковые данные
alert(hello); // Hello world!
alert(message); // Hello world!

// Повторное объявление вызывает ошибку
// Переменная может быть объявлена только один раз.

// Повторное объявление той же переменной является ошибкой:

// повторение ключевого слова 'let' приводит к ошибке
let message = "Другое"; // SyntaxError: 'message' has already been declared

//Поэтому следует объявлять переменную только один раз и затем использовать её уже без let

//В JavaScript есть два ограничения, касающиеся имён переменных:
// Имя переменной должно содержать только буквы, цифры или символы $ и _.
// Первый символ не должен быть цифрой.

let userName;
let test123_$;
let $_dfdsfj;
let 12_rdsd; //Ошибка!!!

// Если имя содержит несколько слов, обычно используется верблюжья нотация, 
// то есть, слова следуют одно за другим, где каждое следующее слово 
// начинается с заглавной буквы: myVeryLongName

// Самое интересное – знак доллара '$' и подчёркивание '_' также можно использовать 
// в названиях. Это обычные символы, как и буквы, без какого-либо особого значения.

let $ = 1; // объявили переменную с именем "$"
let _ = 2; // а теперь переменную с именем "_"

alert($ + _); // 3

let 1a; // не может начинаться с цифры

let my-name; // дефис '-' не разрешён в имени

// Регистр имеет значение
// Переменные с именами apple и APPLE – это две разные переменные.

// Нелатинские буквы разрешены, но не рекомендуются
// Можно использовать любой язык, включая кириллицу или даже иероглифы, например:

let имя = '...';
let 我 = '...';

// Зарезервированные имена
// Существует список зарезервированных слов, которые нельзя использовать в качестве имён переменных, потому что они используются самим языком.

// Например: let, class, return и function зарезервированы.

// Приведённый ниже код даёт синтаксическую ошибку:

let let = 5; // нельзя назвать переменную "let", ошибка!
let return = 5; // также нельзя назвать переменную "return", ошибка!

// заметка: "use strict" в этом примере не используется

num = 5; // если переменная "num" раньше не существовала, она создаётся

alert(num); // 5

// Это плохая практика, которая приводит к ошибке в строгом режиме:

"use strict";

num = 5; // ошибка: num is not defined

// Чтобы объявить константную, то есть, неизменяемую переменную, используйте const вместо let:

const myBirthday = '18.04.1982';

// Переменные, объявленные с помощью const, называются «константами». Их нельзя изменить. Попытка сделать это приведёт к ошибке:

const myBirthday2 = '18.04.1982';

myBirthday2 = '01.01.2001'; // ошибка, константу нельзя перезаписать!

// Константы в верхнем регистре
// Широко распространена практика использования констант в качестве псевдонимов для трудно запоминаемых значений, которые известны до начала исполнения скрипта.

// Названия таких констант пишутся с использованием заглавных букв и подчёркивания.

// Например, сделаем константы для различных цветов в «шестнадцатеричном формате»:

const COLOR_RED = "#F00";
const COLOR_GREEN = "#0F0";
const COLOR_BLUE = "#00F";
const COLOR_ORANGE = "#FF7F00";

// ...когда нам нужно выбрать цвет
let color = COLOR_ORANGE;
alert(color); // #FF7F00

// Преимущества:

// COLOR_ORANGE гораздо легче запомнить, чем "#FF7F00".
// Гораздо легче допустить ошибку при вводе "#FF7F00", чем при вводе COLOR_ORANGE.
// При чтении кода COLOR_ORANGE намного понятнее, чем #FF7F00.

const pageLoadTime = /* время, потраченное на загрузку веб-страницы */;

// Название переменной должно иметь ясный и понятный смысл, 
// говорить о том, какие данные в ней хранятся.

// Итого
// Мы можем объявить переменные для хранения данных с помощью ключевых слов var, let или const.

// let – это современный способ объявления.
// var – это устаревший способ объявления. Обычно мы вообще не используем его, но мы рассмотрим тонкие отличия от let в главе Устаревшее ключевое слово "var" на случай, если это всё-таки вам понадобится.
// const – похоже на let, но значение переменной не может изменяться.
// Переменные должны быть названы таким образом, чтобы мы могли легко понять, что у них внутри.





