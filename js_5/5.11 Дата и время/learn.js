
let now = new Date();
alert( now );
// Если вызываем конструктор без аргумента, 
// то получаем текущую дату и время

let Jan01_1970 = new Date(0);
alert( Jan01_1970 );
// Если передаем в качестве аргумента число, то оно является количесвтом миллисекунд
// прошедших с полуночи 1 января 1970 года, и мы получаем такую дату исходя из количества
// миллисекунд с начала отсчета

let Jan02_1970 = new Date(24 * 3600 * 1000);
alert( Jan02_1970 );
// В этом случае получим другую дату, смещенную относительно 1 января 1970 года на
// величину количества миллисекунд которые мы передали в конструктор дата

// Целое число, представляющее собой количество миллисекунд, 
// прошедших с начала 1970 года, называется таймстамп (англ. timestamp).

// Из timestamp всегда можно получить дату передав timestamp в конструктор
// и из обьекта даты можно всегда получить timestamp вызвав на строке времени
// следующий метод date.getTime();

let Dec31_1969 = new Date(-24 * 3600 * 1000);
alert( Dec31_1969 );
// Датам до 1 января 1970 будут соответствовать отрицательные таймстампы, например:

let date = new Date("2017-01-26");
alert(date);
// Если мы передаем аргумент в виде строки (не числа), то он будет распаршен 
// в дату так же как делает метод date.parse()

new Date(year, month, date, hours, minutes, seconds, ms)
new Date(2011, 0, 1, 0, 0, 0, 0); // // 1 Jan 2011, 00:00:00
new Date(2011, 0, 1); // то же самое, так как часы и проч. равны 0
let date1 = new Date(2011, 0, 1, 2, 3, 4, 567);
alert( date1 ); // 1.01.2011, 02:03:04.567
// year должен состоять из четырёх цифр. Для совместимости также принимаются 
// 2 цифры и рассматриваются как 19xx, к примеру, 98 здесь это тоже самое, 
// что и 1998, но настоятельно рекомендуется всегда использовать 4 цифры.
// month начинается с 0 (январь) по 11 (декабрь).
// Параметр date здесь представляет собой день месяца. Если параметр не задан, 
// то принимается значение 1
// Если параметры hours/minutes/seconds/ms отсутствуют, их значением становится 0

// Получение компонентов даты
const myDate = new Date();
myDate.getFullYear()
myDate.getMonth()
myDate.getDate()
myDate.getHours()
myDate.getMinutes()
myDate.getSeconds()
myDate.getMilliseconds()

myDate.getDay()
// Вернуть день недели от 0 (воскресенье) до 6 (суббота). 
// Несмотря на то, что в ряде стран за первый день недели принят понедельник, 
// в JavaScript начало недели приходится на воскресенье.

// Однако существуют и их UTC-варианты, возвращающие день, 
// месяц, год для временной зоны UTC+0: getUTCFullYear(), getUTCMonth(), getUTCDay(). 
// Для их использования требуется после "get" подставить "UTC".

// текущая дата
let date2 = new Date();

// час в вашем текущем часовом поясе
alert( date2.getHours() );

// час в часовом поясе UTC+0 (лондонское время без перехода на летнее время)
alert( date2.getUTCHours() );

date.getTime()
// Для заданной даты возвращает таймстамп – количество миллисекунд, 
// прошедших с 1 января 1970 года UTC+0.

getTimezoneOffset()
// Возвращает разницу в минутах между UTC и местным часовым поясом:
// если вы в часовом поясе UTC-1, то выводится 60
// если вы в часовом поясе UTC+3, выводится -180
alert( new Date().getTimezoneOffset() );

// Следующие методы позволяют установить компоненты даты и времени:
setFullYear(year, [month], [date])
setMonth(month, [date])
setDate(date)
setHours(hour, [min], [sec], [ms])
setMinutes(min, [sec], [ms])
setSeconds(sec, [ms])
setMilliseconds(ms)
setTime(milliseconds) 
// (устанавливает дату в виде целого количества миллисекунд, прошедших с 01.01.1970 UTC)

// Если объект Date преобразовать в число, то получим таймстамп по аналогии с date.getTime()
let date5 = new Date();
alert(+date5); // количество миллисекунд, то же самое, что date.getTime()

// Даты можно приобразовывать к числу получая timestemp и монжно вычитать, разница дат 
// будет число в миллисекундах.

Date.now()
// Если нужно просто измерить время, объект Date нам не нужен.
// Существует особый метод Date.now(), возвращающий текущую метку времени.
// Семантически он эквивалентен new Date().getTime(), 
// однако метод не создаёт промежуточный объект Date. 
// Так что этот способ работает быстрее и не нагружает сборщик мусора.





