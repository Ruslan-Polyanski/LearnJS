
let billion1 = 1000000000;
let billion2 = 1_000_000_000;

let billion3 = 1e9;  // 1 миллиард, буквально: 1 и 9 нулей
console.log( 7.3e9 );  // 7.3 миллиарда (7,300,000,000)

// Другими словами, "e" умножает число на 1 с указанным количеством нулей.
console.log(1e3 === 1 * 1000) // e3 означает *1000
console.log(1.23e6 === 1.23 * 1000000) // e6 означает *1000000

let mcs = 0.000001;
let ms = 1e-6; // шесть нулей слева от 1

// 1 делится на 1 с 3 нулями
console.log(1e-3 === 1 / 1000) (0.001)

// 1.23 делится на 1 с 6 нулями
console.log(1.23e-6 === 1.23 / 1000000) (0.00000123)

console.log( 0xff ); // 255
console.log( 0xFF ); // 255 (то же самое, регистр не имеет значения)

let a = 0b11111111; // двоичная (бинарная) форма записи числа 255
let b = 0o377; // восьмеричная форма записи числа 255

console.log( a == b ); // true, с двух сторон число 255

// Метод num.toString(base) возвращает строковое представление числа num в системе счисления base

let num = 255;
console.log( num.toString(16) );  // ff
console.log( num.toString(2) );   // 11111111

// base может варьироваться от 2 до 36 (по умолчанию 10).

console.log( 123456..toString(36) ); // 2n9c

// Внимание! Две точки в 123456..toString(36) это не опечатка. 
// Если нам надо вызвать метод непосредственно на числе, как toString в примере выше, 
// то нам надо поставить две точки .. после числа.
// Если мы поставим одну точку: 123456.toString(36), тогда это будет ошибкой, 
// поскольку синтаксис JavaScript предполагает, 
// что после первой точки начинается десятичная часть. 
// А если поставить две точки, то JavaScript понимает, что десятичная часть отсутствует, 
// и начинается метод.
// Также можно записать как (123456).toString(36).

Math.floor // Округление в меньшую сторону: 3.1 становится 3, а -1.1 — -2.
Math.ceil  // Округление в большую сторону: 3.1 становится 4, а -1.1 — -1.
Math.round // Округление до ближайшего целого: 3.1 становится 3, 3.6 — 4, а -1.1 — -1.
Math.trunc // Производит удаление дробной части без округления: 3.1 становится 3, а -1.1 — -1.

let num1 = 1.23456;
console.log( Math.round(num1 * 100) / 100 ); // 1.23456 -> 123.456 -> 123 -> 1.23

let num2 = 12.34;
console.log( num2.toFixed(1) ); // "12.3"

let num3 = 12.36;
console.log( num3.toFixed(1) ); // "12.4"

let num4 = 12.34;
console.log( num.toFixed(5) ); // "12.34000", добавлены нули, чтобы получить 5 знаков после запятой

// Мы можем преобразовать полученное значение в число, используя унарный оператор + или Number(), 
// пример с унарным оператором: +num.toFixed(5)



